import axios from "axios";
import { Map, MapStatus } from "../../Autogenerated/Backend";
import { BASE_API_URL } from "../../Configuration";

export abstract class MapAPI {
    public static readonly MAP_API_PATH = 'map';

    public static GetMaps = async (filterName?: string, maxPlayersCount?: number) => {
        const url = new URL(`${BASE_API_URL}/${this.MAP_API_PATH}/`);
        if (filterName) {
            url.searchParams.append('filterName', filterName);
        }
        if (maxPlayersCount) {
            url.searchParams.append('maxPlayersCount', maxPlayersCount.toString());
        }
        const result = await axios.get(url.toString());
        const maps: Map[] = await result.data;
        return maps;
    }

    public static GetMap = async (mapId: number) => {
        const url = `${BASE_API_URL}/${this.MAP_API_PATH}/${mapId}`;
        const result = await axios.get(url);
        if (result.status == 400) {
            return null;
        }
        const map: Map = await result.data;
        return map;
    }

    public static DeleteMap = async (mapId: number) => {
        const url = `${BASE_API_URL}/${this.MAP_API_PATH}/delete/${mapId}`;
        await axios.delete(url);
        console.log('Marked as deleted map with id', mapId);
    }

    public static MarkAsAvilable = async (mapId: number) => {
        const url = `${BASE_API_URL}/${this.MAP_API_PATH}/make_available/${mapId}`;
        await axios.put(url);
        console.log('Marked as available map with id', mapId);
    }

    public static UpdateMap = async (map: Map, coverImageFile: File | null) => {
        const url = `${BASE_API_URL}/${this.MAP_API_PATH}/${map.id!}`;

        const form = new FormData();
        form.append('name', map.name!);
        form.append('width', map.width!.toString());
        form.append('height', map.height!.toString());
        form.append('maxPlayersCount', map.maxPlayersCount!.toString());
        form.append('description', map.description!);
        if (map.mapStatus! === MapStatus.Available) {
            await this.MarkAsAvilable(map.id!);
        } else if (map.mapStatus! === MapStatus.Deleted) {
            await this.DeleteMap(map.id!);
        }
        if (coverImageFile !== null) {
            form.append('coverImageFile', coverImageFile);
        }

        await axios.put(url, form);
    }

    public static CreateMap = async (map: Map, coverImage: { file: File, url: string } | null = null) => {
        const url = `${BASE_API_URL}/${this.MAP_API_PATH}`;
        const form = new FormData();
        form.append('name', map.name!);
        form.append('width', map.width!.toString());
        form.append('height', map.height!.toString());
        form.append('maxPlayersCount', map.maxPlayersCount!.toString());
        form.append('description', map.description!);

        if (coverImage != null) {
            form.append('coverImageUrl', coverImage.url);
            form.append('coverImageFile', coverImage.file);
        }

        await axios.post(url, form);
    }
}