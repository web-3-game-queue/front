import axios from "axios";
import { BASE_API_URL } from "../../Configuration";
import { User } from "../../Autogenerated/Backend";

export abstract class AuthenticationAPI {
    public static readonly AUTHENTICATION_API_PATH = 'authentication';

    public static GetMe = async () => {
        const url = `${BASE_API_URL}/${this.AUTHENTICATION_API_PATH}`;
        const result = await axios.get(url);
        const user: User = result.data;
        return user;
    }

    public static Login = async (login: string, password: string) => {
        try {
            const url = new URL(`${BASE_API_URL}/${this.AUTHENTICATION_API_PATH}/login`);
            url.searchParams.append('login', login);
            url.searchParams.append('password', password);
            const result = await axios.post(url.toString());
            const token: string = result.data;
            return token;
        } catch (error) {
            return null;
        }
    }

    private static readonly MOD_ROLES = ['Moderator', 'Administrator'];
    public static IsMod = async () => await this.HasClaim(this.MOD_ROLES);

    private static readonly ADMIN_ROLES = ['Administrator'];
    public static IsAdmin = async () => await this.HasClaim(this.ADMIN_ROLES);

    public static HasClaim = async (claimSpellings: string[]) => {
        try {
            const me = await this.GetMe();
            for (const claim of claimSpellings) {
                if (me.claims?.indexOf(claim) != -1) {
                    return true;
                }
            }
            return false;
        } catch (error) {
            return false;
        }
    }
}