import { FC, useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { setMapIds, useAuth } from '../../../Core/Storage/DataSlice';
import { Map, MapStatus } from '../../../Autogenerated/Backend';
import { LoadingIndicator } from '../../UI/LoadingIndicator';
import { AuthenticationAPI } from '../../../Core/APIs/AuthenticationAPI';
import { MapAPI } from '../../../Core/APIs/MapAPI';
import { StaticDataAPI } from '../../../Core/APIs/StaticDataAPI';
import { useDispatch } from 'react-redux';
import { SearchMapsRequestAPI } from '../../../Core/APIs/SearchMapsRequestAPI';

interface MapEditPageProps {
    mapId: number;
}

export const MapEditPageComponent: FC<MapEditPageProps> = ({ mapId }) => {
    const navigate = useNavigate();
    const auth = useAuth();
    const [map, setMap] = useState<Map | null | undefined>(undefined);
    const [update, setUpdate] = useState(true);
    const dispatch = useDispatch();

    const nameInput = useRef<HTMLInputElement>(null);
    const widthInput = useRef<HTMLInputElement>(null);
    const heightInput = useRef<HTMLInputElement>(null);
    const maxPlayersCountInput = useRef<HTMLInputElement>(null);
    const descriptionInput = useRef<HTMLInputElement>(null);
    const imageInput = useRef<HTMLInputElement>(null);
    const isAvailableInput = useRef<HTMLInputElement>(null);

    async function handleSubmit(event: React.FormEvent) {
        event.preventDefault();
        const name = nameInput.current?.value ?? '';
        const width = widthInput.current ? parseInt(widthInput.current.value) : 0;
        const height = heightInput.current ? parseInt(heightInput.current.value) : 0;
        const maxPlayersCount = maxPlayersCountInput.current ? parseInt(maxPlayersCountInput.current.value) : 0;
        const description = descriptionInput.current?.value ?? '';
        const image = imageInput.current?.files?.item(0) ?? null;
        const isAvailable = isAvailableInput.current?.checked ?? false;

        const newMap: Map = {
            id: mapId,
            name,
            width,
            height,
            maxPlayersCount,
            description,
            mapStatus: isAvailable ? MapStatus.Available : MapStatus.Deleted,
            coverImageUrl: map?.coverImageUrl
        };

        const currentRequest = await SearchMapsRequestAPI.GetCurrent();
        if (currentRequest === null) {
            dispatch(setMapIds([]));
        } else {
            dispatch(setMapIds(currentRequest.maps!.map((x) => x.id!)));
        }

        await MapAPI.UpdateMap(newMap, image);
        setUpdate(true);
    }

    useEffect(() => {
        async function loadData() {
            const isAdmin = await AuthenticationAPI.IsAdmin();
            if (!isAdmin) {
                navigate('../');
            }
            const gotMap = await MapAPI.GetMap(mapId);
            setMap(gotMap);
        }

        if (update) {
            setUpdate(false);
            loadData();
        }
    }, [auth, mapId, navigate, update]);

    if (map === undefined) {
        return <LoadingIndicator />;
    }

    if (map === null) {
        return <h2>Карта с номером #{mapId} не найдена</h2>;
    }

    const coverImageUrl = StaticDataAPI.FormMapCoverUrl(map);
    return (
        <div className="card" key={map.id}>
            <h3>Редактирование карты "{map.name}"</h3>
            <div className="card-body">
                <form className="card p-2 m-3 needs-validation" style={{ width: '250px', display: 'inline-block' }} onSubmit={handleSubmit}>
                    <div
                        style={{
                            height: '5rem',
                            position: 'relative'
                        }}
                    >
                        <img
                            src={coverImageUrl}
                            alt="Minimap image"
                            style={{
                                maxWidth: '100%',
                                maxHeight: '100%',
                                resize: 'both',
                                top: 0,
                                bottom: 0,
                                left: 0,
                                right: 0,
                                position: 'absolute',
                                margin: 'auto',
                                width: 'auto',
                                height: 'auto',
                                border: '1px solid black'
                            }}
                        />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Name" className="form-label">
                            Название
                        </label>
                        <input type="text" className="form-control" id="Name" name="Name" ref={nameInput} defaultValue={map.name!} />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Width" className="form-label">
                            Ширина
                        </label>
                        <input type="number" className="form-control" id="Width" name="Width" min="0" ref={widthInput} defaultValue={map.width!} />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Height" className="form-label">
                            Высота
                        </label>
                        <input type="number" className="form-control" id="Height" name="Height" min="0" ref={heightInput} defaultValue={map.height!} />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Height" className="form-label">
                            Максимальное количество игроков
                        </label>
                        <input type="number" className="form-control" id="Height" name="Height" min="0" ref={maxPlayersCountInput} defaultValue={map.maxPlayersCount!} />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Description" className="form-label">
                            Описание
                        </label>
                        <input type="text" className="form-control" id="Description" name="Description" ref={descriptionInput} defaultValue={map.description!} />
                    </div>
                    <div className="mb-3">
                        <label htmlFor="Image" className="form-label">
                            Обложка
                        </label>
                        <input type="file" className="form-control" id="Image" name="Image" min="0" ref={imageInput} />
                    </div>
                    <div className="form-check">
                        <input className="form-check-input" type="checkbox" value="" id="flexCheckDefault" ref={isAvailableInput} defaultChecked={map.mapStatus! == MapStatus.Available} />
                        <label className="form-check-label" htmlFor="flexCheckDefault">
                            Доступна
                        </label>
                    </div>

                    <button type="submit" className="btn btn-primary">
                        Сохранить изменения
                    </button>
                </form>
                {/* {controls} */}
            </div>
        </div>
    );
};
