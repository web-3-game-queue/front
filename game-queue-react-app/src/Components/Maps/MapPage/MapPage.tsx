import { FC, useState, useEffect } from 'react';
import { MapAPI } from '../../../Core/APIs/MapAPI';
import { LoadingIndicator } from '../../UI/LoadingIndicator';
import { StaticDataAPI } from '../../../Core/APIs/StaticDataAPI';
import { Map, MapStatus, MapToString } from '../../../Autogenerated/Backend';
import { SearchMapsRequestAPI } from '../../../Core/APIs/SearchMapsRequestAPI';
import { useDispatch } from 'react-redux';
import { addMapId, removeMapId, setCurrentRequestId, useAuth } from '../../../Core/Storage/DataSlice';
import { AuthenticationAPI } from '../../../Core/APIs/AuthenticationAPI';
import { useNavigate } from 'react-router-dom';

interface MapPageComponentProps {
    id: number;
}

export const MapPageComponent: FC<MapPageComponentProps> = ({ id }: MapPageComponentProps) => {
    const [map, setMap] = useState<Map | null | undefined>(undefined);
    const [needsUpdate, setNeedsUpdate] = useState(true);
    const [added, setAdded] = useState<boolean>(false);
    const [isMod, setIsMod] = useState<boolean>(false);

    const navigate = useNavigate();

    const auth = useAuth();
    const dispatch = useDispatch();

    async function onAddMap() {
        const searchMapsRequestId = await SearchMapsRequestAPI.AddMapToRequest(id);
        dispatch(addMapId(id));
        dispatch(setCurrentRequestId(searchMapsRequestId));
        setNeedsUpdate(true);
    }

    async function onRemoveAdd() {
        await SearchMapsRequestAPI.RemoveMapFromRequest(id);
        dispatch(removeMapId(id));
        setNeedsUpdate(true);
    }

    useEffect(() => {
        async function getData() {
            const gotMap = await MapAPI.GetMap(id);
            if (auth !== null) {
                const currentRequest = await SearchMapsRequestAPI.GetCurrent();
                setAdded(currentRequest?.maps?.findIndex((m) => m.id == id) != -1);
            }
            const isMod = await AuthenticationAPI.IsMod();
            setIsMod(isMod);
            setMap(gotMap);
        }
        if (needsUpdate) {
            getData();
            setNeedsUpdate(false);
        }
        return () => {};
    }, [id, needsUpdate, auth]);

    const onClickDelete = async () => {
        await MapAPI.DeleteMap(id);
        setNeedsUpdate(true);
        dispatch(removeMapId(id));
    };

    const onClickBack = () => {
        navigate(-1);
    };

    const backButton = (
        <button className="btn btn-secondary" onClick={onClickBack}>
            Назад
        </button>
    );

    const addButton =
        auth === null ? null : added ? (
            <button className="btn btn-warning m-1" onClick={onRemoveAdd}>
                Снять выбор
            </button>
        ) : (
            <button className="btn btn-info m-1" onClick={onAddMap}>
                Выбрать карту
            </button>
        );

    const deleteButton = isMod ? (
        <button className="btn btn-danger" onClick={onClickDelete}>
            Удалить
        </button>
    ) : null;

    const buttons = [backButton, addButton, deleteButton]
        .filter((x) => x != null)
        .flatMap((x) => [x, <br />])
        .slice(0, -1);

    if (map === null) {
        return <h2>Карта с номером #{id} не найдена</h2>;
    } else if (map == undefined) {
        return <LoadingIndicator />;
    }
    const coverImageUrl = StaticDataAPI.FormMapCoverUrl(map);
    const controls = map.mapStatus == MapStatus.Deleted ? <h5>Недоступна.</h5> : <div>{buttons}</div>;
    const description = map.description ? <span>{map.description}</span> : <span className="text-body-secondary">Описание отсутствует</span>;
    return (
        <div className="card" key={map.id}>
            <div className="card-body">
                <div
                    style={{
                        height: '30rem',
                        position: 'relative'
                    }}
                >
                    <img
                        src={coverImageUrl}
                        alt="Minimap image"
                        style={{
                            maxWidth: '100%',
                            maxHeight: '100%',
                            resize: 'both',
                            position: 'absolute',
                            top: 0,
                            bottom: 0,
                            left: 0,
                            right: 0,
                            margin: 'auto',
                            width: 'auto',
                            height: 'auto',
                            border: '1px solid black'
                        }}
                    />
                </div>
                <h3 className="card-title">{map.name}</h3>
                {MapToString(map)}
                <br />
                {description}
                {controls}
            </div>
        </div>
    );
};
