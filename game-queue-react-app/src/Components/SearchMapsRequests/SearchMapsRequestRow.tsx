import { FC, useState, useEffect } from 'react';
import { SearchMapsRequest, SearchMapsRequestStatus, SearchMapsRequestStatusToString, SearchMapsRequestVerbose, User } from '../../Autogenerated/Backend';
import { SearchMapsRequestAPI } from '../../Core/APIs/SearchMapsRequestAPI';
import { LoadingIndicator } from '../UI/LoadingIndicator';
import { MapsSubListComponent } from './MapsSubList';
import { Link } from 'react-router-dom';
import { UserAPI } from '../../Core/APIs/UserAPI';

function searchMapsRequestStatusToBgClass(searchMapsRequestStatus?: SearchMapsRequestStatus) {
    switch (searchMapsRequestStatus) {
        case SearchMapsRequestStatus.Draft:
            return '';
        case SearchMapsRequestStatus.Cancelled:
            return 'bg-danger-subtle';
        case SearchMapsRequestStatus.Composed:
            return 'bg-info-subtle';
        case SearchMapsRequestStatus.Deleted:
            return 'bg-warning-subtle';
        case SearchMapsRequestStatus.Done:
            return 'bg-success-subtle';

        default:
            return 'bg-dark';
    }
}

function formatDateString(dateString: string) {
    const date = new Date(dateString);
    return date.toLocaleString();
}

interface SearchMapsRequestRowComponentProps {
    searchMapsRequest: SearchMapsRequest;
    isMod: boolean;
}

export const SearchMapsRequestRowComponent: FC<SearchMapsRequestRowComponentProps> = ({ searchMapsRequest, isMod }) => {
    const [verboseRequest, setVerboseRequest] = useState<SearchMapsRequestVerbose | null>(null);
    const [creator, setCreator] = useState<User | null>(null);

    const [status, setStatus] = useState(searchMapsRequest.status);

    useEffect(() => {
        async function loadCreator() {
            const creator = await UserAPI.GetUser(searchMapsRequest.creatorUserId!);
            setCreator(creator);
        }

        setCreator(null);
        loadCreator();
    }, [searchMapsRequest]);

    async function onOpenMaps() {
        const verboseRequest = await SearchMapsRequestAPI.GetRequest(searchMapsRequest.id!);
        setVerboseRequest(verboseRequest);
    }

    async function setNewStatus(newStatus: SearchMapsRequestStatus) {
        try {
            await SearchMapsRequestAPI.SetStatus(searchMapsRequest.id!, newStatus);
            setStatus(newStatus);
        } catch (_) {
            console.error('Error setting new status');
        }
    }

    const bgColor = searchMapsRequestStatusToBgClass(status);

    const mapsSubList = verboseRequest == null ? <LoadingIndicator /> : <MapsSubListComponent maps={verboseRequest.maps!} />;

    const statusText = SearchMapsRequestStatusToString(status);

    const statusDisplay =
        isMod && status == SearchMapsRequestStatus.Composed ? (
            <div className="dropdown">
                <button className="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    {statusText}
                </button>
                <ul className="dropdown-menu">
                    <li className="bg-danger-subtle">
                        <a className="dropdown-item" href="#" onClick={() => setNewStatus(SearchMapsRequestStatus.Cancelled)}>
                            Отменить
                        </a>
                    </li>
                    <li className="bg-success-subtle">
                        <a className="dropdown-item" href="#" onClick={() => setNewStatus(SearchMapsRequestStatus.Done)}>
                            Завершить
                        </a>
                    </li>
                </ul>
            </div>
        ) : (
            statusText
        );

    return (
        <tr key={searchMapsRequest.id}>
            <th className={bgColor} scope="row">
                <span className="badge text-bg-dark">{searchMapsRequest.id}</span>
            </th>
            {isMod ? <td className={bgColor}>{creator ? creator.name : <LoadingIndicator />}</td> : <></>}
            <td className={bgColor}>{statusDisplay}</td>
            <td className={bgColor}>{formatDateString(searchMapsRequest.creationDate!)}</td>
            <td className={bgColor}>{searchMapsRequest.composeDate ? formatDateString(searchMapsRequest.composeDate) : <span className="text-body-secondary">—</span>}</td>
            <td className={bgColor}>{searchMapsRequest.doneDate ? formatDateString(searchMapsRequest.doneDate) : <span className="text-body-secondary">—</span>}</td>
            <td className={bgColor}>
                <div className="accordion" id="mapsAccordion">
                    <div className="accordion-item">
                        <h2 className="accordion-header">
                            <button className="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target={`#collapse${searchMapsRequest.id}`} aria-expanded="true" onClick={onOpenMaps}>
                                Открыть список ({searchMapsRequest.mapsCount})
                            </button>
                        </h2>
                        <div id={`collapse${searchMapsRequest.id}`} className="accordion-collapse collapse" data-bs-parent="#mapsAccordion">
                            <div className="accordion-body">{mapsSubList}</div>
                        </div>
                    </div>
                </div>
            </td>
            <td className={bgColor}>
                <Link className="btn btn-primary" to={`./${searchMapsRequest.id}`}>
                    Открыть
                </Link>
            </td>
        </tr>
    );
};
