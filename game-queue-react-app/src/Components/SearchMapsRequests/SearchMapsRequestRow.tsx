import { FC, useState } from 'react';
import { SearchMapsRequest, SearchMapsRequestStatus, SearchMapsRequestStatusToString, SearchMapsRequestVerbose } from '../../Autogenerated/Backend';
import { SearchMapsRequestAPI } from '../../Core/APIs/SearchMapsRequestAPI';
import { LoadingIndicator } from '../UI/LoadingIndicator';
import { MapsSubListComponent } from './MapsSubList';

function searchMapsRequestStatusToBgClass(searchMapsRequestStatus?: SearchMapsRequestStatus) {
    switch (searchMapsRequestStatus) {
        case SearchMapsRequestStatus.Draft:
            return '';
        case SearchMapsRequestStatus.Cancelled:
            return 'bg-danger-subtle';
        case SearchMapsRequestStatus.Composed:
            return 'bg-info-subtle';
        case SearchMapsRequestStatus.Deleted:
            return 'bg-warning-subtle';
        case SearchMapsRequestStatus.Done:
            return 'bg-success-subtle';

        default:
            return 'bg-dark';
    }
}

interface SearchMapsRequestRowComponentProps {
    searchMapsRequest: SearchMapsRequest;
}

export const SearchMapsRequestRowComponent: FC<SearchMapsRequestRowComponentProps> = ({ searchMapsRequest }) => {
    const [verboseRequest, setVerboseRequest] = useState<SearchMapsRequestVerbose | null>(null);

    async function onOpenMaps() {
        const verboseRequest = await SearchMapsRequestAPI.GetRequest(searchMapsRequest.id!);
        setVerboseRequest(verboseRequest);
    }

    const bgColor = searchMapsRequestStatusToBgClass(searchMapsRequest.status);

    const mapsSubList = verboseRequest == null ? <LoadingIndicator /> : <MapsSubListComponent maps={verboseRequest.maps!} />;

    return (
        <tr key={searchMapsRequest.id}>
            <th className={bgColor} scope="row">
                {searchMapsRequest.id}
            </th>
            <td className={bgColor}>{SearchMapsRequestStatusToString(searchMapsRequest.status)}</td>
            <td className={bgColor}>{searchMapsRequest.creationDate}</td>
            <td className={bgColor}>{searchMapsRequest.composeDate ?? <span className="text-body-secondary">—</span>}</td>
            <td className={bgColor}>{searchMapsRequest.doneDate ?? <span className="text-body-secondary">—</span>}</td>
            <td className={bgColor}>
                <div className="accordion" id="mapsAccordion">
                    <div className="accordion-item">
                        <h2 className="accordion-header">
                            <button className="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target={`#collapse${searchMapsRequest.id}`} aria-expanded="true" onClick={onOpenMaps}>
                                Открыть ({searchMapsRequest.mapsCount})
                            </button>
                        </h2>
                        <div id={`collapse${searchMapsRequest.id}`} className="accordion-collapse collapse" data-bs-parent="#mapsAccordion">
                            <div className="accordion-body">{mapsSubList}</div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    );
};
